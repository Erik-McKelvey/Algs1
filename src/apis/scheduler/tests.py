
# Generated by CodiumAI
from src.apis.scheduler.newcso import evaluate_fitness


import pytest

"""
Code Analysis

Objective:
The evaluate_fitness function is used to calculate the fitness score of a given solution in the context of the Cat Swarm Optimization algorithm for course scheduling. The function takes in a solution, which includes professor, room, and time slot assignments for each class, as well as information about the professors, classes, rooms, and time blocks. The function evaluates the fitness of the solution based on various criteria, such as professor availability, room capacity, and professor preferences, and returns a fitness score.

Inputs:
- solution: a dictionary containing professor, room, and time slot assignments for each class, as well as a fitness score
- professors: a list of dictionaries containing information about each professor, such as availability, course preferences, and maximum number of courses
- classes: a list of dictionaries containing information about each class, such as capacity and terms offered
- rooms: a list of dictionaries containing information about each room, such as capacity
- time_blocks: a list of time blocks, such as 'A', 'B', 'C', etc.

Flow:
- Extract information from the solution, including professor, room, and time slot assignments for each class
- Initialize fitness score
- Evaluate professor assignments:
  - Check if the professor is available in the assigned time slot
  - Increment fitness for each preferred course assigned to the professor
  - Increment fitness for each course assigned to the professor that is below their maximum course limit
- Evaluate room assignments:
  - Check if the room capacity is sufficient for the assigned class
- Evaluate professor clash fitness:
  - Assemble all courses taught by each professor
  - Create a list of time blocks taught by each professor
  - If the list of time blocks contains duplicates, decrement fitness score
- Add a random value to the fitness score
- Return the fitness score

Outputs:
- fitness: an integer representing the fitness score of the solution

Additional aspects:
- The function includes a global variable VERY_LOW_VALUE, which is used to decrement the fitness score if a professor is assigned to teach multiple courses at the same time block
- The function adds a random value to the fitness score to introduce some randomness into the optimization process
"""
class TestEvaluateFitness:
    # Tests that fitness score is incremented for each available professor
    def test_professor_available(self):
        professors = [
            {
                'available': {'A': True, 'B': False, 'C': True},
                'course_pref': ['CSC101', 'CSC102'],
                'max_courses': 2
            },
            {
                'available': {'A': True, 'B': True, 'C': True},
                'course_pref': ['CSC101'],
                'max_courses': 1
            }
        ]
        classes = [
            {'shorthand': 'CSC101', 'capacity': 50},
            {'shorthand': 'CSC102', 'capacity': 50}
        ]
        rooms = [
            {'capacity': 60},
            {'capacity': 40}
        ]
        time_blocks = ['A', 'B', 'C']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 2

    # Tests that fitness score is incremented for each preferred course assigned
    def test_professor_pref_assigned(self):
        professors = [
            {
                'available': {'A': True, 'B': False, 'C': True},
                'course_pref': ['CSC101', 'CSC102'],
                'max_courses': 2
            },
            {
                'available': {'A': True, 'B': True, 'C': True},
                'course_pref': ['CSC101'],
                'max_courses': 1
            }
        ]
        classes = [
            {'shorthand': 'CSC101', 'capacity': 50},
            {'shorthand': 'CSC102', 'capacity': 50}
        ]
        rooms = [
            {'capacity': 60},
            {'capacity': 40}
        ]
        time_blocks = ['A', 'B', 'C']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 2

    # Tests that fitness score is incremented for course below max limit
    def test_course_below_max_limit(self):
        professors = [
            {
                'available': {'A': True, 'B': False, 'C': True},
                'course_pref': ['CSC101', 'CSC102'],
                'max_courses': 2
            },
            {
                'available': {'A': True, 'B': True, 'C': True},
                'course_pref': ['CSC101'],
                'max_courses': 1
            }
        ]
        classes = [
            {'shorthand': 'CSC101', 'capacity': 50},
            {'shorthand': 'CSC102', 'capacity': 50}
        ]
        rooms = [
            {'capacity': 60},
            {'capacity': 40}
        ]
        time_blocks = ['A', 'B', 'C']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 4

    # Tests that fitness score is decremented if room capacity is insufficient
    def test_insufficient_room_capacity(self):
        professors = [
            {
                'available': {'A': True, 'B': False, 'C': True},
                'course_pref': ['CSC101', 'CSC102'],
                'max_courses': 2
            },
            {
                'available': {'A': True, 'B': True, 'C': True},
                'course_pref': ['CSC101'],
                'max_courses': 1
            }
        ]
        classes = [
            {'shorthand': 'CSC101', 'capacity': 50},
            {'shorthand': 'CSC102', 'capacity': 50}
        ]
        rooms = [
            {'capacity': 60},
            {'capacity': 40}
        ]
        time_blocks = ['A', 'B', 'C']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 1, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == -1

    # Tests that fitness score is incremented if no timeblock clashes occur
    def test_no_timeblock_clashes(self):
        professors = [
            {
                'available': {'A': True, 'B': False, 'C': True},
                'course_pref': ['CSC101', 'CSC102'],
                'max_courses': 2
            },
            {
                'available': {'A': True, 'B': True, 'C': True},
                'course_pref': ['CSC101'],
                'max_courses': 1
            }
        ]
        classes = [
            {'shorthand': 'CSC101', 'capacity': 50},
            {'shorthand': 'CSC102', 'capacity': 50}
        ]
        rooms = [
            {'capacity': 60},
            {'capacity': 40}
        ]
        time_blocks = ['A', 'B', 'C']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 2

    # Tests that fitness score is decremented if timeblock clashes occur
    def test_timeblock_clashes(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': ['CS101', 'CS102'],
                'max_courses': 2
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CS101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            },
            {
                'name': 'Data Structures and Algorithms',
                'shorthand': 'CS102',
                'terms_offered': ['C', 'D'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 60
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0},
            'room_assignments': {0: 0, 1: 0},
            'class_timeslots': {0: 'A', 1: 'C'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == -1

    # Tests that fitness score is incremented randomly
    def test_random_increment(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': ['CS101', 'CS102'],
                'max_courses': 2
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CS101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            },
            {
                'name': 'Data Structures and Algorithms',
                'shorthand': 'CS102',
                'terms_offered': ['C', 'D'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 60
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0},
            'room_assignments': {0: 0, 1: 0},
            'class_timeslots': {0: 'A', 1: 'C'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) in range(-11, 11)

    # Tests that fitness score is decremented if professor is not available
    def test_professor_not_available(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': False, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': ['CS101', 'CS102'],
                'max_courses': 2
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CS101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            },
            {
                'name': 'Data Structures and Algorithms',
                'shorthand': 'CS102',
                'terms_offered': ['C', 'D'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 60
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0},
            'room_assignments': {0: 0, 1: 0},
            'class_timeslots': {0: 'A', 1: 'C'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == -1

    # Tests that the fitness score is decremented if a professor has no preferences
    def test_professor_with_no_preferences(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': [],
                'max_courses': 3
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'ICS',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 50
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0},
            'room_assignments': {0: 0},
            'class_timeslots': {0: 'A'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == -1

    # Tests that the fitness score is incremented if a professor has no maximum courses
    def test_professor_no_max_courses(self):
        professors = [
            {
                'name': 'John Doe',
                'max_courses': 0,
                'course_pref': ['CSC101', 'CSC102'],
                'available': {
                    'A': True,
                    'B': True,
                    'C': True,
                    'D': True,
                    'E': True,
                    'F': True,
                    'G': True,
                    'H': True,
                    'I': True,
                    'L': True,
                    'M': True,
                    'N': True,
                    'O': True
                }
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CSC101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 50
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {
                0: 0
            },
            'room_assignments': {
                0: 0
            },
            'class_timeslots': {
                0: 'A'
            }
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 6

    # Tests that the fitness score is incremented by 5 if a professor has a preferred course that is assigned to them
    def test_fitness_score_incremented_if_professor_has_preferred_course_assigned(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'max_courses': 3,
                'course_pref': ['CSC101']
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CSC101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 50
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0},
            'room_assignments': {0: 0},
            'class_timeslots': {0: 'A'},
            'fitness': None
        }
        fitness = evaluate_fitness(solution, professors, classes, rooms, time_blocks)
        assert fitness == 6

    # Tests that the fitness score is decremented if a professor has max courses and is teaching too many courses
    def test_max_courses(self):
        professors = {
            0: {
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': ['CSC101'],
                'max_courses': 2
            },
            1: {
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'course_pref': ['CSC102'],
                'max_courses': 3
            }
        }
        classes = {
            0: {'shorthand': 'CSC101', 'capacity': 50},
            1: {'shorthand': 'CSC102', 'capacity': 50}
        }
        rooms = {
            0: {'capacity': 50},
            1: {'capacity': 50}
        }
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 6

    # Tests that the fitness score is incremented by 5 if a professor has a preferred course that is not assigned to them
    def test_fitness_score_incremented_if_prof_has_preferred_course_not_assigned(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'max_courses': 3,
                'course_pref': ['CSC101', 'CSC102']
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CSC101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            },
            {
                'name': 'Data Structures and Algorithms',
                'shorthand': 'CSC102',
                'terms_offered': ['B', 'C'],
                'capacity': 50
            }
        ]
        rooms = [
            {'name': 'Room 1', 'capacity': 50},
            {'name': 'Room 2', 'capacity': 100}
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        fitness = evaluate_fitness(solution, professors, classes, rooms, time_blocks)
        assert fitness == 7

    # Tests that the fitness score is incremented by 5 if a professor has multiple preferred courses assigned
    def test_fitness_score_incremented_for_multiple_preferred_courses(self):
        professors = [
            {
                'name': 'John Doe',
                'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True},
                'max_courses': 3,
                'course_pref': ['CSC101', 'CSC102', 'CSC103']
            }
        ]
        classes = [
            {
                'name': 'Introduction to Computer Science',
                'shorthand': 'CSC101',
                'terms_offered': ['A', 'B'],
                'capacity': 50
            },
            {
                'name': 'Data Structures and Algorithms',
                'shorthand': 'CSC102',
                'terms_offered': ['B', 'D'],
                'capacity': 50
            },
            {
                'name': 'Software Engineering',
                'shorthand': 'CSC103',
                'terms_offered': ['C', 'E'],
                'capacity': 50
            }
        ]
        rooms = [
            {
                'name': 'Room 1',
                'capacity': 50
            },
            {
                'name': 'Room 2',
                'capacity': 100
            }
        ]
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 0, 2: 0},
            'room_assignments': {0: 0, 1: 1, 2: 0},
            'class_timeslots': {0: 'A', 1: 'B', 2: 'C'},
            'fitness': None
        }
        fitness = evaluate_fitness(solution, professors, classes, rooms, time_blocks)
        assert fitness == 8

    # Tests that the fitness score is decremented if the room capacity is exactly sufficient
    def test_room_capacity_decrement(self):
        professors = {
            0: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102']},
            1: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102']},
            2: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102']}
        }
        classes = {
            0: {'shorthand': 'CSC101', 'capacity': 50, 'terms_offered': ['A', 'B', 'C']},
            1: {'shorthand': 'CSC102', 'capacity': 50, 'terms_offered': ['A', 'B', 'C']}
        }
        rooms = {
            0: {'name': 'Room 1', 'capacity': 50},
            1: {'name': 'Room 2', 'capacity': 50}
        }
        time_blocks = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O']
        solution = {
            'professor_assignments': {0: 0, 1: 1},
            'room_assignments': {0: 0, 1: 1},
            'class_timeslots': {0: 'A', 1: 'B'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == -1

    # Tests that fitness score is incremented if room capacity is greater than class capacity
    def test_room_capacity_greater_than_class_capacity(self):
        professors = {
            0: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102', 'CSC103']},
            1: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102', 'CSC103']},
            2: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102', 'CSC103']},
            3: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102', 'CSC103']},
            4: {'available': {'A': True, 'B': True, 'C': True, 'D': True, 'E': True, 'F': True, 'G': True, 'H': True, 'I': True, 'L': True, 'M': True, 'N': True, 'O': True}, 'max_courses': 3, 'course_pref': ['CSC101', 'CSC102', 'CSC103']}
        }
        classes = {
            0: {'shorthand': 'CSC101', 'capacity': 50},
            1: {'shorthand': 'CSC102', 'capacity': 50},
            2: {'shorthand': 'CSC103', 'capacity': 50}
        }
        rooms = {
            0: {'name': 'Room A', 'capacity': 100},
            1: {'name': 'Room B', 'capacity': 100},
            2: {'name': 'Room C', 'capacity': 100}
        }
        time_blocks = ['A','B','C','D','E','F','G','H','I','L','M','N','O']
        solution = {
            'professor_assignments': {0: 0, 1: 1, 2: 2},
            'room_assignments': {0: 0, 1: 1, 2: 2},
            'class_timeslots': {0: 'A', 1: 'B', 2: 'C'},
            'fitness': None
        }
        assert evaluate_fitness(solution, professors, classes, rooms, time_blocks) == 3